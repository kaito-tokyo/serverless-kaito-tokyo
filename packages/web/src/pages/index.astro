---
import Layout from "../layouts/Layout.astro";
import fetchApi from "../lib/strapi.js";
import type { Artwork } from "../interfaces/Artwork.js";
import type { Novel } from "../interfaces/Novel.js";
import ArtworkCard from "../components/ArtworkCard.astro";
import NovelCard from "../components/NovelCard.astro";

import { processArtwork } from "../lib/artwork-processor.js";

const artworks = await fetchApi<Artwork[]>({
  endpoint: "artworks",
  query: {
    "populate": "*",
    "sort": "Date:desc",
    "pagination[limit]": "20",
  },
  wrappedByKey: "data",
});

const novels = await fetchApi<Novel[]>({
  endpoint: "novels",
  query: {
    "sort": "Date:desc",
    "pagination[limit]": "20",
  },
  wrappedByKey: "data",
});

const combined = [
  ...artworks.map((artwork) => ({ ...artwork, type: "artwork" as const })),
  ...novels.map((novel) => ({ ...novel, type: "novel" as const })),
];

const sorted = combined.sort(
  (a, b) => new Date(b.Date).getTime() - new Date(a.Date).getTime(),
);

const latest = sorted.slice(0, 20);

const processedLatest = latest
  .map((item) => {
    if (item.type === "artwork") {
      return processArtwork(item);
    }
    return item;
  })
  .filter((item) => item !== null);
---

<Layout title="最新の作品 - Kaito.tokyo">
  <h1>最新の作品 - Kaito.tokyo</h1>
  <ul>
    {
      processedLatest.map((item) =>
        item.type === "artwork" ? (
          <ArtworkCard artwork={item} />
        ) : (
          <NovelCard novel={item} />
        ),
      )
    }
  </ul>
</Layout>

<style>
  ul {
    display: flex;
    flex-wrap: wrap;
    list-style: none;
    margin: 0;
    padding: 0;
    gap: 8px;
  }
</style>
