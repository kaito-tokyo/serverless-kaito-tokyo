---
import fetchApi from "../../lib/strapi.js";
import type { Novel } from "../../interfaces/Novel.js";
import { groupByMonth } from "../../lib/group-by-month.js";

const novels = await fetchApi<Novel[]>({
  endpoint: "novels?sort=Date:desc",
  wrappedByKey: "data",
});

const groupedNovels = groupByMonth(novels);

const formatMonthForDisplay = (month: string) => {
  const [year, monthStr] = month.split("-");
  if (
    typeof year === "string" &&
    typeof monthStr === "string" &&
    /^\d{4}$/.test(year) &&
    /^\d{1,2}$/.test(monthStr) &&
    !Number.isNaN(Number(year)) &&
    !Number.isNaN(Number(monthStr))
  ) {
    const date = new Date(Number(year), Number(monthStr) - 1, 1);
    return date.toLocaleString("ja-JP", {
      year: "numeric",
      month: "long",
    });
  } else {
    return month || "Invalid date";
  }
};

const monthlyNovels = Array.from(groupedNovels.entries()).map(
  ([month, novelsInMonth]) => ({
    formattedMonth: formatMonthForDisplay(month),
    novels: novelsInMonth,
  }),
);
---

<!doctype html>
<html lang="ja-JP">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>小説 - kaito.tokyo</title>
  </head>
  <body>
    <main>
      <h1>小説</h1>
      {
        monthlyNovels.map(({ formattedMonth, novels }) => (
          <section>
            <h2>{formattedMonth}</h2>
            <ul>
              {novels.map((novel) => (
                <li>
                  <a href={`/novel/${novel.slug}`}>
                    <h3>{novel.Title}</h3>
                  </a>
                </li>
              ))}
            </ul>
          </section>
        ))
      }
    </main>
  </body>
</html>
