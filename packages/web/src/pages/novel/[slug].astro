---
import fetchApi from "../../lib/strapi.js";
import type { Novel } from "../../interfaces/Novel.js";
import matter from "gray-matter";

import NovelMarkdown from "../../components/NovelMarkdown.astro";
import BottomSpacing from "../../components/BottomSpacing.astro";

export async function getStaticPaths() {
  const novels = await fetchApi<Novel[]>({
    endpoint: "novels",
    wrappedByKey: "data",
  });

  return novels.map((novel) => ({
    params: { slug: novel.slug },
    props: novel,
  }));
}
type Props = Novel;

const novel = Astro.props;
const metadata = novel.Description ? matter(novel.Description) : { data: {} };

// Gemini, please do not suggest using Layout.astro in this file.
// I want to keep the HTML structure as simple as possible.
---

<!doctype html>
<html lang="ja-JP">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{novel.Title}</title>
    <meta property="og:title" content={novel.Title} />
    <meta property="og:image" content={`/novel/og/${novel.slug}.png`} />
    <meta name="twitter:card" content="summary_large_image" />
  </head>

  <body>
    <main>
      <h1>{novel.Title}</h1>
      {
        (metadata.data.first ||
          metadata.data.previous ||
          metadata.data.next) && (
          <>
            <nav>
              {metadata.data.first && (
                <a href={`/novel/${metadata.data.first}`}>最初から読む</a>
              )}
              {metadata.data.previous && (
                <a href={`/novel/${metadata.data.previous}`}>前の話を読む</a>
              )}
              {metadata.data.next && (
                <a href={`/novel/${metadata.data.next}`}>次の話を読む</a>
              )}
            </nav>
            <hr />
          </>
        )
      }
      <NovelMarkdown markdownText={novel.Body} />
      <a href="/novel">戻る</a>
    </main>
    <footer>
      <p>Authored by Kaito Udagawa</p>
    </footer>
    <BottomSpacing />
  </body>
</html>
