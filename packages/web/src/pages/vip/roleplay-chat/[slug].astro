---
import Layout from "../../../layouts/Layout.astro";
import fetchApi from "../../../lib/strapi.js";
import type { RoleplayActor } from "../../../interfaces/RoleplayActor.js";

export async function getStaticPaths() {
  const roleplayActors = await fetchApi<RoleplayActor[]>({
    endpoint: "roleplay-actors",
    wrappedByKey: "data",
  });

  return roleplayActors.map((actor) => ({
    params: { slug: actor.slug },
    props: actor,
  }));
}
type Props = RoleplayActor;

const actor = Astro.props;
const { slug } = Astro.params;
---

<Layout title={`${actor.Name} - Roleplay Chat`}>
  <main>
    <div id="chat-container">
      <div id="chat-box"></div>
      <div id="input-container">
        <input type="text" id="message-input" placeholder="Type a message..." />
        <button id="send-button">Send</button>
      </div>
    </div>
  </main>
</Layout>

<style>
  main {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 80vh;
  }

  #chat-container {
    width: 100%;
    max-width: 600px;
    height: 100%;
    border: 1px solid #ccc;
    display: flex;
    flex-direction: column;
    border-radius: 8px;
    overflow: hidden;
  }

  #chat-box {
    flex-grow: 1;
    padding: 1rem;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .message {
    padding: 0.5rem 1rem;
    border-radius: 1rem;
    max-width: 80%;
    word-wrap: break-word;
  }

  .user-message {
    background-color: #007bff;
    color: white;
    align-self: flex-end;
  }

  .assistant-message {
    background-color: #e9e9eb;
    color: black;
    align-self: flex-start;
  }

  #input-container {
    display: flex;
    padding: 1rem;
    border-top: 1px solid #ccc;
  }

  #message-input {
    flex-grow: 1;
    border: 1px solid #ccc;
    padding: 0.5rem;
    border-radius: 4px;
  }

  #send-button {
    margin-left: 1rem;
    padding: 0.5rem 1rem;
    border: none;
    background-color: #007bff;
    color: white;
    border-radius: 4px;
    cursor: pointer;
  }
</style>

<script define:vars={{ slug }}>
  const chatBox = document.getElementById("chat-box");
  const messageInput = document.getElementById("message-input");
  const sendButton = document.getElementById("send-button");

  let chatHistory = [];

  function addMessage(message, sender) {
    const messageElement = document.createElement("div");
    messageElement.classList.add("message", `${sender}-message`);
    messageElement.textContent = message;
    chatBox.appendChild(messageElement);
    chatBox.scrollTop = chatBox.scrollHeight;
  }

  async function sendMessage() {
    const nextUserMessageContent = messageInput.value.trim();
    if (!nextUserMessageContent) return;

    const userMessage = {
      role: "user",
      content: nextUserMessageContent,
    };

    addMessage(userMessage.content, userMessage.role);

    const previousMessages = chatHistory;
    chatHistory = [...previousMessages, userMessage];

    messageInput.value = "";
    sendButton.disabled = true;

    try {
      const response = await fetch(
        `/api/vip/roleplay-chat/${encodeURIComponent(slug)}`,
        {
          method: "POST",
          body: new URLSearchParams({
            nextUserMessage: userMessage.content,
            previousMessages: JSON.stringify(previousMessages),
          }),
          credentials: "include",
        },
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const newChatHistory = await response.json();
      const assistantMessage = newChatHistory[newChatHistory.length - 1];

      if (assistantMessage && assistantMessage.role === "assistant") {
        addMessage(assistantMessage.content, assistantMessage.role);
        chatHistory = newChatHistory;
      } else {
        throw new Error("Invalid response from server.");
      }
    } catch (error) {
      console.error(
        "Error sending message:",
        error && error.message ? error.message : error,
      );
      let userErrorMessage = "An unexpected error occurred.";
      if (error instanceof TypeError) {
        userErrorMessage =
          "Network error: Please check your connection and try again.";
      } else if (error.message && error.message.startsWith("HTTP error!")) {
        userErrorMessage =
          "Server error: Unable to process your request at the moment.";
      }
      addMessage(userErrorMessage, "assistant");
      chatHistory.pop();
      if (chatBox.lastChild) {
        chatBox.removeChild(chatBox.lastChild);
      }
    } finally {
      sendButton.disabled = false;
      messageInput.focus();
    }
  }

  sendButton.addEventListener("click", sendMessage);
  messageInput.addEventListener("keypress", (event) => {
    if (event.key === "Enter") {
      sendMessage();
    }
  });
</script>
