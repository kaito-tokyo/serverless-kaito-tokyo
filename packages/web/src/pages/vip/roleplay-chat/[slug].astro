---
import Layout from "../../../layouts/Layout.astro";
import fetchApi from "../../../lib/strapi.js";
import type { RoleplayActor } from "../../../interfaces/RoleplayActor.js";

export async function getStaticPaths() {
  const roleplayActors = await fetchApi<RoleplayActor[]>({
    endpoint: "roleplay-actors",
    wrappedByKey: "data",
  });

  return roleplayActors.map((actor) => ({
    params: { slug: actor.slug },
    props: actor,
  }));
}
type Props = RoleplayActor;

const actor = Astro.props;
const { slug } = Astro.params;
---

<Layout title={`${actor.Name} - Roleplay Chat`}>
  <div id="chat-container">
    <div id="chat-name">{actor.Name}</div>
    <div id="chat-box"></div>
    <div id="input-container">
      <input type="text" id="message-input" placeholder="Type a message..." />
      <button id="send-button">Send</button>
    </div>
  </div>
</Layout>

<style is:global>
  :root {
    --primary-background-color: #adf0b9;
    --primary-foreground-color: #333;
    --accent-background-color: #348107;
    --accent-foreground-color: #eee;
  }

  main {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 80vh;
  }

  #chat-container {
    width: 600px;
    max-width: 600px;
    height: 100%;
    border: 2px solid var(--accent-foreground-color);
    display: flex;
    flex-direction: column;
    border-radius: 8px;
    overflow: hidden;
  }

  #chat-name {
    background-color: var(--accent-background-color);
    color: var(--accent-foreground-color);
    padding: 1rem;
    font-weight: bold;
  }

  #chat-box {
    background-color: var(--primary-background-color);
    flex-grow: 1;
    padding: 1rem;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .message {
    padding: 0.5rem 1rem;
    border-radius: 1rem;
    max-width: 80%;
    word-wrap: break-word;
    white-space: pre-wrap;
  }

  .user-message {
    background-color: #007bff;
    color: white;
    align-self: flex-end;
  }

  .assistant-message {
    background-color: #e9e9eb;
    color: black;
    align-self: flex-start;
  }

  #input-container {
    display: flex;
    padding: 1rem;
    border-top: 1px solid #ccc;
    background-color: var(--accent-background-color);
  }

  #message-input {
    flex-grow: 1;
    border: 1px solid #ccc;
    padding: 0.5rem;
    border-radius: 4px;
  }

  #send-button {
    margin-left: 1rem;
    padding: 0.5rem 1rem;
    border: none;
    background-color: #007bff;
    color: white;
    border-radius: 4px;
    cursor: pointer;
  }
</style>

<script define:vars={{ slug }}>
  const chatBox = document.getElementById("chat-box");
  const messageInput = document.getElementById("message-input");
  const sendButton = document.getElementById("send-button");

  let previousStateToken = null;

  function addMessage(message, sender) {
    const messageElement = document.createElement("div");
    messageElement.classList.add("message", `${sender}-message`);
    messageElement.textContent = message;
    chatBox.appendChild(messageElement);
    chatBox.scrollTop = chatBox.scrollHeight;
  }

  async function sendMessage() {
    const message = messageInput.value.trim();
    if (!message) return;

    addMessage(message, "user");
    messageInput.value = "";
    sendButton.disabled = true;

    try {
      const body = new URLSearchParams({ message });
      if (previousStateToken) {
        body.append("previousState", previousStateToken);
      }

      const response = await fetch(
        `/api/vip/roleplay-chat/${encodeURIComponent(slug)}`,
        {
          method: "POST",
          body: body,
          credentials: "include",
        },
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      const assistantMessage = data.response;
      previousStateToken = data.previousState;

      if (assistantMessage) {
        addMessage(assistantMessage, "assistant");
      } else {
        throw new Error("Invalid response from server.");
      }
    } catch (error) {
      console.error("Error sending message:", error);
      addMessage("Sorry, something went wrong.", "assistant");
    } finally {
      sendButton.disabled = false;
      messageInput.focus();
    }
  }

  sendButton.addEventListener("click", sendMessage);
  messageInput.addEventListener("keypress", (event) => {
    if (event.key === "Enter") {
      sendMessage();
    }
  });
</script>
